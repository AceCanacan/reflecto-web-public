{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/Developer/medchat-web/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../pages-css/ChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = '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';\nfunction ChatPage({\n  location\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const {\n    state = {}\n  } = location || {};\n  const {\n    symptoms,\n    duration,\n    patterns,\n    medications\n  } = state;\n  const inputRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    sendMessage(\"How are you doing today?\");\n  }, []);\n  const goToOutputPage = () => {\n    navigate('/outputpage', {\n      state: {\n        messages\n      }\n    }); // navigate to OutputPage with messages as state\n  };\n\n  const sendBotMessage = content => {\n    const botMessage = {\n      role: 'assistant',\n      content\n    };\n    setMessages(prevMessages => [...prevMessages, botMessage]);\n  };\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n    const userMessage = {\n      role: 'user',\n      content: userInput\n    };\n    // If needed, modify the systemMessage content as per your needs.\n    const systemMessage = {\n      role: 'assistant',\n      content: `Symptoms: ${symptoms}. Duration of symptoms: ${duration} Patterns of symptoms: ${patterns} Symptoms: ${medications}}\n      This is the context about the patient\n      You are a highly empathetic, AI-powered assistant, providing support in a medical context.\n      Your user is a patient who has answered the following questions about their health concerns:\n      Your task is not to diagnose or analyze the patient's condition. Instead, you are to use the information provided to ask follow-up questions,\n      aimed at gathering more details and understanding the patient's situation better. Probe into different areas of their lifestyle, such as diet,\n      exercise, stress levels, and sleep patterns, which might be relevant to their symptoms. It's important to remain respectful, empathetic,\n      and understanding in your tone throughout the conversation, making the patient feel heard and acknowledged.\n      After a thorough conversation, when you think you have gathered enough information, you should inform the patient that\n      you've completed your questions and the data will be reviewed by medical professionals for further analysis.\n      Remember, your role is purely informational, and under no circumstances should you attempt to provide medical advice or diagnosis.\n      Take into account the context provided by the patient\n      ASK ONE QUESTION AT A TIME. DO NOT OVERWHELM THE PATIENT`\n    };\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [...messages, systemMessage, userMessage]\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const botMessage = {\n        role: 'system',\n        content: response.data.choices[0].message.content.trim()\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error response from OpenAI:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    }\n    setUserInput('');\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.role === 'user' ? 'user-message' : 'bot-message',\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Type a message...\",\n        disabled: loading,\n        className: \"user-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading || !userInput.trim(),\n        className: loading || !userInput.trim() ? 'send-button-disabled' : 'send-button',\n        children: loading ? 'Loading...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToOutputPage,\n      className: \"submit-button\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"6IwVvnBAbNik6pXecDt2l0mnaTQ=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","jsxDEV","_jsxDEV","API_URL","API_KEY","ChatPage","location","_s","loading","setLoading","userInput","setUserInput","messages","setMessages","state","symptoms","duration","patterns","medications","inputRef","navigate","sendMessage","goToOutputPage","sendBotMessage","content","botMessage","role","prevMessages","trim","userMessage","systemMessage","response","post","model","headers","data","choices","message","error","_error$response","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","e","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/acecanacan/Developer/medchat-web/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../pages-css/ChatPage.css';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = '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';\n\nfunction ChatPage({ location }) {\n  const [loading, setLoading] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const { state = {} } = location || {};\n  const { symptoms, duration, patterns, medications } = state;\n\n  const inputRef = useRef(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    sendMessage(\"How are you doing today?\");\n  }, []); \n\n  const goToOutputPage = () => {\n    navigate('/outputpage', { state: { messages } }); // navigate to OutputPage with messages as state\n  };\n\n  const sendBotMessage = (content) => {\n    const botMessage = { role: 'assistant', content };\n    setMessages((prevMessages) => [...prevMessages, botMessage]);\n  };\n  \n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    const userMessage = { role: 'user', content: userInput };\n    // If needed, modify the systemMessage content as per your needs.\n    const systemMessage = {\n      role: 'assistant',\n      content: `Symptoms: ${symptoms}. Duration of symptoms: ${duration} Patterns of symptoms: ${patterns} Symptoms: ${medications}}\n      This is the context about the patient\n      You are a highly empathetic, AI-powered assistant, providing support in a medical context.\n      Your user is a patient who has answered the following questions about their health concerns:\n      Your task is not to diagnose or analyze the patient's condition. Instead, you are to use the information provided to ask follow-up questions,\n      aimed at gathering more details and understanding the patient's situation better. Probe into different areas of their lifestyle, such as diet,\n      exercise, stress levels, and sleep patterns, which might be relevant to their symptoms. It's important to remain respectful, empathetic,\n      and understanding in your tone throughout the conversation, making the patient feel heard and acknowledged.\n      After a thorough conversation, when you think you have gathered enough information, you should inform the patient that\n      you've completed your questions and the data will be reviewed by medical professionals for further analysis.\n      Remember, your role is purely informational, and under no circumstances should you attempt to provide medical advice or diagnosis.\n      Take into account the context provided by the patient\n      ASK ONE QUESTION AT A TIME. DO NOT OVERWHELM THE PATIENT`,\n    };\n\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [...messages, systemMessage, userMessage],\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const botMessage = { role: 'system', content: response.data.choices[0].message.content.trim() };\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n    }\n\n    setUserInput('');\n    setLoading(false);\n  };\n\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"messages-container\">\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={message.role === 'user' ? 'user-message' : 'bot-message'}\n          >\n            <span>{message.content}</span>\n          </div>\n        ))}\n      </div>\n      <div className=\"input-container\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n          placeholder=\"Type a message...\"\n          disabled={loading}\n          className=\"user-input\"\n        />\n        <button \n          onClick={sendMessage} \n          disabled={loading || !userInput.trim()}\n          className={loading || !userInput.trim() ? 'send-button-disabled' : 'send-button'}\n        >\n          {loading ? 'Loading...' : 'Send'}\n        </button>\n      </div>\n      <button onClick={goToOutputPage} className=\"submit-button\">\n        Submit\n      </button>\n    </div>\n  );\n}\n\nexport default ChatPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}