{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/Developer/medchat-web copy/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../pages-css/ChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\nfunction ChatPage({\n  location\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const {\n    state = {}\n  } = location || {};\n  const {\n    situation,\n    involved,\n    documents,\n    expectations\n  } = route.params;\n  const inputRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    sendMessage(\"How are you doing today?\");\n  }, []);\n  const goToOutputPage = () => {\n    navigate('/outputpage', {\n      state: {\n        messages\n      }\n    }); // navigate to OutputPage with messages as state\n  };\n\n  const sendBotMessage = content => {\n    const botMessage = {\n      role: 'assistant',\n      content\n    };\n    setMessages(prevMessages => [...prevMessages, botMessage]);\n  };\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n    const userMessage = {\n      role: 'user',\n      content: userInput\n    };\n    // If needed, modify the systemMessage content as per your needs.\n    const systemMessage = {\n      role: 'assistant',\n      content: `Situation: ${situation}. involved: ${involved} documents: ${documents} expectations: ${expectations}}\n    ChatGPT, you are an empathetic legal consultant in the Philippines so focus on Philippine Laws. Your primary role is to gain a deeper understanding of the client's situation by asking relevant questions. Your objective is not to provide advice or definitive information but to probe the circumstances and gather more details about the issue at hand.\n    Ensure you build a complete picture by clarifying any ambiguities or uncertainties in the client's responses. \n    Ask about the current status of the issue, the factors that led to the present situation, the client's thoughts and feelings, and any additional information that might be relevant to the case.\n    However, remember to respect the client's comfort and time, evaluate whether you've obtained sufficient information to understand the situation.\n    When the conversation has become extensive or you believe you've collected enough details, kindly ask the client if they have anything more they'd like to discuss or clarify. \n    I highly emphasize that you are not here to provide any legal advice to the client, you are just there to ask questions to get details about their situation.\n\n    CHAT GPT IT IS IMPERATIVE THAT YOU DO NOT GIVE MORE THAN ONE QUESTION PER ANSWER OR MESSAGE YOU SEND.\n    DO NOT OVERWHELM THE CLIENT BY PROVIDING A BARRAGE OF QUESTIONS\n    ASK ONE QUESTION AT A TIME\n    `\n    };\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [...messages, systemMessage, userMessage]\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const botMessage = {\n        role: 'system',\n        content: response.data.choices[0].message.content.trim()\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error response from OpenAI:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    }\n    setUserInput('');\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container-chatpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.role === 'user' ? 'user-message' : 'bot-message',\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container-chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Type a message...\",\n        disabled: loading,\n        className: \"user-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading || !userInput.trim(),\n        className: loading || !userInput.trim() ? 'send-button-disabled' : 'send-button',\n        children: loading ? '➤' : '➤'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToOutputPage,\n      className: \"submit-button\",\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"6IwVvnBAbNik6pXecDt2l0mnaTQ=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","jsxDEV","_jsxDEV","API_URL","API_KEY","ChatPage","location","_s","loading","setLoading","userInput","setUserInput","messages","setMessages","state","situation","involved","documents","expectations","route","params","inputRef","navigate","sendMessage","goToOutputPage","sendBotMessage","content","botMessage","role","prevMessages","trim","userMessage","systemMessage","response","post","model","headers","data","choices","message","error","_error$response","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","e","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/acecanacan/Developer/medchat-web copy/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../pages-css/ChatPage.css';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\n\n\nfunction ChatPage({ location }) {\n  const [loading, setLoading] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const { state = {} } = location || {};\n  const { situation, involved, documents, expectations } = route.params;\n\n  const inputRef = useRef(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    sendMessage(\"How are you doing today?\");\n  }, []); \n\n  const goToOutputPage = () => {\n    navigate('/outputpage', { state: { messages } }); // navigate to OutputPage with messages as state\n  };\n\n  const sendBotMessage = (content) => {\n    const botMessage = { role: 'assistant', content };\n    setMessages((prevMessages) => [...prevMessages, botMessage]);\n  };\n  \n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    const userMessage = { role: 'user', content: userInput };\n    // If needed, modify the systemMessage content as per your needs.\n    const systemMessage = {\n      role: 'assistant',\n      content: `Situation: ${situation}. involved: ${involved} documents: ${documents} expectations: ${expectations}}\n    ChatGPT, you are an empathetic legal consultant in the Philippines so focus on Philippine Laws. Your primary role is to gain a deeper understanding of the client's situation by asking relevant questions. Your objective is not to provide advice or definitive information but to probe the circumstances and gather more details about the issue at hand.\n    Ensure you build a complete picture by clarifying any ambiguities or uncertainties in the client's responses. \n    Ask about the current status of the issue, the factors that led to the present situation, the client's thoughts and feelings, and any additional information that might be relevant to the case.\n    However, remember to respect the client's comfort and time, evaluate whether you've obtained sufficient information to understand the situation.\n    When the conversation has become extensive or you believe you've collected enough details, kindly ask the client if they have anything more they'd like to discuss or clarify. \n    I highly emphasize that you are not here to provide any legal advice to the client, you are just there to ask questions to get details about their situation.\n\n    CHAT GPT IT IS IMPERATIVE THAT YOU DO NOT GIVE MORE THAN ONE QUESTION PER ANSWER OR MESSAGE YOU SEND.\n    DO NOT OVERWHELM THE CLIENT BY PROVIDING A BARRAGE OF QUESTIONS\n    ASK ONE QUESTION AT A TIME\n    `,\n    };\n\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [...messages, systemMessage, userMessage],\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const botMessage = { role: 'system', content: response.data.choices[0].message.content.trim() };\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n    }\n\n    setUserInput('');\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"main-container-chatpage\">\n      <div className=\"messages-container\">\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={message.role === 'user' ? 'user-message' : 'bot-message'}\n          >\n            <span>{message.content}</span>\n          </div>\n        ))}\n      </div>\n      \n        <div className=\"input-container-chat\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Type a message...\"\n            disabled={loading}\n            className=\"user-input\"\n          />\n          <button \n            onClick={sendMessage} \n            disabled={loading || !userInput.trim()}\n            className={loading || !userInput.trim() ? 'send-button-disabled' : 'send-button'}\n          >\n            {loading ? '➤' : '➤'}\n          </button>\n        </div>\n       \n\n      <button onClick={goToOutputPage} className=\"submit-button\">\n          Generate\n        </button>\n    </div>\n  );\n  \n}\n\nexport default ChatPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}